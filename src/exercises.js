// ! Example 1 - Основи об'єктів

// * Напиши скрипт, який для об'єкта user, послідовно:

// TODO додає поле mood зі значенням 'happy'
// TODO замінює значення hobby на 'skydiving'
// TODO замінює значення premium на false
// TODO виводить вміст об'єкта user у форматі ключ:значення використовуючи Object.keys() та for...of

const user = {
  name: 'Mango',
  age: 20,
  hobby: 'html',
  premium: true,
};

// ! Example 2 - метод Object.values()

/*
 * У нас є об'єкт, де зберігаються зарплати нашої команди.
 * Напишіть код для підсумовування всіх зарплат і збережіть результат у змінній sum.
 * Повинно вийти 390. Якщо об'єкт salaries порожній, то результат має бути 0.
 */

const salaries = {
  John: 100,
  Ann: 160,
  Pete: 130,
};

// ! Example 3 - Масив об'єктів

/*
 * Напишіть функцію calcTotalPrice(stones, stoneName), яка приймає масив об'єктів та рядок з назвою каменю.
 * Функція рахує і повертає загальну вартість каміння з таким ім'ям, ціною та кількістю з об'єкта.
 */

const stones = [
  { name: 'Смарагд', price: 1300, quantity: 4 },
  { name: 'Діамант', price: 2700, quantity: 3 },
  { name: 'Сапфір', price: 400, quantity: 7 },
  { name: 'Щебінь', price: 200, quantity: 2 },
];

// ! Example 4 - Комплексні завдання

/*
 * Напиши скрипт управління особистим кабінетом інтернет банку.
 * Є об'єкт account в якому необхідно реалізувати методи для роботи з балансом та історією транзакцій.
 */

/*
 TODO Типів транзакцій всього два.
 TODO Можна покласти чи зняти гроші з рахунку.
 */
const Transaction = {
  DEPOSIT: 'deposit',
  WITHDRAW: 'withdraw',
};

/*
 TODO Кожна транзакція це об'єкт із властивостями: id, type та amount
 */

const account = {
  // Поточний баланс рахунку
  balance: 0,

  // Історія транзакцій
  transactions: [],

  /*
   TODO Метод створює та повертає об'єкт транзакції.
   TODO Приймає суму та тип транзакції.
   */
  createTransaction(amount, type) {},

  /*
   TODO Метод, що відповідає за додавання суми до балансу.
   TODO Приймає суму транзакції.
   TODO Викликає createTransaction для створення об'єкта транзакції після чого додає його до історії транзакцій
   */
  deposit(amount) {},

  /*
   TODO Метод, що відповідає за зняття суми з балансу.
   TODO Приймає суму транзакції.
   TODO Викликає createTransaction для створення об'єкта транзакції після чого додає його до історії транзакцій.

   TODO Якщо amount більше ніж поточний баланс, виводь повідомлення про те, що зняття такої суми не можливе, недостатньо коштів.
   */
  withdraw(amount) {},

  /*
   TODO Метод повертає поточний баланс
   */
  getBalance() {},

  /*
   TODO Метод шукає та повертає об'єкт транзакції по id
   */
  getTransactionDetails(id) {},

  /*
   TODO Метод повертає кількість коштів певного типу транзакції з усієї історії транзакцій
   */
  getTransactionTotal(type) {},
};
