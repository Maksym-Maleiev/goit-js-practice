// * Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

/*
// TODO –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:

// TODO createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.

// TODO logProduct(product) - –∫–æ–ª–±–±–µ–∫ –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å

// TODO logTotalPrice(product) - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å

const createProduct = (partialProduct, callback) => {
  const newProduct = {
    id: Date.now(), // 1970.01.01 -> now in ms
    ...partialProduct,
  };

  callback(newProduct);
};

const logProduct = product => {
  console.log(product);
};

const logTotalPrice = product => {
  const { price, quantity } = product;
  let totalPrice = price * quantity;

  console.log(totalPrice);
};

// logProduct({ name: 'üçé', price: 30, quantity: 3 });
// logTotalPrice({ name: 'üçé', price: 30, quantity: 3 });

createProduct({ name: 'üçé', price: 30, quantity: 3 }, logProduct);
createProduct({ name: 'üçã', price: 20, quantity: 5 }, logTotalPrice);
*/

// * Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
/*
// TODO –î–æ–¥–∞–π—Ç–µ –æ–±'—î–∫—Ç account –º–µ—Ç–æ–¥–∏ withdraw(amount, onSuccess, onError) —Ç–∞ deposit(amount, onSuccess, onError), –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞ –¥—Ä—É–≥–∏–π —Ç–∞ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–ª–±–µ–∫–∏.

// TODO –ú–µ—Ç–æ–¥ withdraw –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ this.balance, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// TODO –ú–µ—Ç–æ–¥ deposit –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ –º–µ–Ω—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

const TRANSACTION_LIMIT = 1000;

const account = {
  userName: 'Max',
  balance: 400,
  withdraw(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT) {
      onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
    } else if (amount > this.balance) {
      onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
    } else {
      this.balance -= amount;
      onSuccess(`Account balance: ${this.balance}`);
    }
  },
  deposit(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT) {
      onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
    } else if (amount <= 0) {
      onError(`Amount must be more than 0 credits`);
    } else {
      this.balance += amount;
      onSuccess(`Account balance: ${this.balance}`);
    }
  },
};

function handleSuccess(message) {
  console.log(`‚úÖ Success! ${message}`);
}
function handleError(message) {
  console.log(`‚ùå Error! ${message}`);
}

account.withdraw(2000, handleSuccess, handleError);
account.withdraw(600, handleSuccess, handleError);
account.withdraw(300, handleSuccess, handleError);
account.deposit(1700, handleSuccess, handleError);
account.deposit(0, handleSuccess, handleError);
account.deposit(-600, handleSuccess, handleError);
account.deposit(600, handleSuccess, handleError);
*/

// * Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

/*
// TODO –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é each(array, callback), —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î –º–∞—Å–∏–≤, –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É.

// TODO –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–ª–±–µ–∫–∞.

const each = (array, callback) => {
  const newArr = [];

  array.forEach(element => newArr.push(callback(element)));

  return newArr;
};

console.log(
  each([64, 49, 36, 25, 16], function (value) {
    return value * 2;
  })
);

console.log(
  each([64, 49, 36, 25, 16], function (value) {
    return value - 10;
  })
);

console.log(
  each([64, 49, 36, 25, 16], function (value) {
    return Math.sqrt(value);
  })
);

console.log(
  each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
    return Math.ceil(value);
  })
);

console.log(
  each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
    return Math.floor(value);
  })
);
*/

// * Example 4 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

// TODO –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

const createProduct = (partialProduct, callback) => callback({ id: Date.now(), ...partialProduct });

const logProduct = product => console.log(product);

const logTotalPrice = product => console.log(product.price * product.quantity);

createProduct({ name: 'üçé', price: 30, quantity: 3 }, logProduct);
createProduct({ name: 'üçã', price: 20, quantity: 5 }, logTotalPrice);
